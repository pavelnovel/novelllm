{"timestamp": "2024-10-30 04:45:46", "text": "I oscillate between excitement and cynicism about the AI stuff. You know .. *waves hands vaguely*... all this \"AI stuff\" - the advancements, new features, and breathless announcements of what could be coming next. On one hand, it's so cool to see so much innovation happening. On the other hand, it's all so recursive - we're adding layers of abstraction without fundamentally changing what we're trying to accomplish. Example: Recently Google announced Jarvis, which allows for the AI to interface with your computer. This is coming on the heels of Claude's introduction last week of their \"computer use\" feature which allows Claude to have control of your computer to perform tasks on your behalf. (Microsoft, Apple, and OpenAI are also working on something similar). I know it sounds like a big breakthrough, but the idea of an AI using your computer to book tickets... isn't that crazy. In the \"old\" world, I start at google, the backend is code, and the interface is the browser. I then see a bunch of options and I click on the things I want. In this \"new\" world, I start at AI, the backend becomes the website, and the interface is the chat. I am given a bunch of options and I click (or say!) the things I want. The action to the consumer is the same, as is the end-result (the plane ticket). There's always an invisible backend, and there's always the human interface. What happens in the backend doesn't actually matter to the consumer (that's why it's the backend). What happens in between the backend + interface is relevant for entrepreneurs and engineers, but to the user, the fundamental experience persists: we express what we want, and the system delivers. Let's put this in perspective: The fact that you can buy your ticket electronically on a computer is already crazy. (And the fact that I can use this ticket to go a thousand miles in a metal tube that's flying 5 miles up in the air is actually the craziest part of all this). Whether it happens through some HTML/HTTP protocol on the backend, through a website that's rendered in your browser, or if it happens because an LLM processes that HTML rendering of the website to do the thing you're looking to do, is less relevant. So there is novelty to this, but it's not anything transformative. The \"computer use\" then just becomes a more advanced API, in that I'm able to have new tools integrated with other in new ways. Which is awesome, and of course there's going to be some AMAZING new use cases out of this, in the same ways that APIs opened up a whole slew of use cases of software over the last few decades. This isn't to diminish the tech achievements behind these developments, it's just to contextualize. Innovation doesn't always have to be revolutionary to be valuable. The history of technology is full of small steps that compound into meaningful progress - but we don't need to make incremental steps to be leaps. Sometimes an upgrade is just an upgrade, and that's okay."}